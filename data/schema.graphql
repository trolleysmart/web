input AddItemsToShoppingListInput {
  shoppingListId: ID!
  productPriceIds: [ID!]
  stapleItemIds: [ID!]
  newStapleItemNames: [String!]
  clientMutationId: String
}

type AddItemsToShoppingListPayload {
  errorMessage: String
  shoppingListItems: [ShoppingListItemEdge]
  clientMutationId: String
}

input AddShoppingListInput {
  name: String!
  clientMutationId: String
}

type AddShoppingListPayload {
  errorMessage: String
  shoppingList: ShoppingListEdge
  clientMutationId: String
}

type GeoLocation {
  latitude: Float
  longitude: Float
}

type MasterProduct implements Node {
  id: ID!
  name: String
  description: String
  imageUrl: String
  barcode: String
  size: String
  tags: [Tag]
}

# A connection to a list of items.
type MasterProductConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [MasterProductEdge]
}

# An edge in a connection.
type MasterProductEdge {
  # The item at the end of the edge
  node: MasterProduct

  # A cursor for use in pagination
  cursor: String!
}

type MultiBuy {
  awardQuantity: Int
  awardValue: Float
}

type Mutation {
  addItemsToShoppingList(input: AddItemsToShoppingListInput!): AddItemsToShoppingListPayload
  addShoppingList(input: AddShoppingListInput!): AddShoppingListPayload
  removeItemsFromShoppingList(input: RemoveItemsFromShoppingListInput!): RemoveItemsFromShoppingListPayload
  removeShoppingList(input: RemoveShoppingListInput!): RemoveShoppingListPayload
  setUserDefaultShoppingList(input: SetUserDefaultShoppingListInput!): SetUserDefaultShoppingListPayload
  submitUserFeedback(input: SubmitUserFeedbackInput!): SubmitUserFeedbackPayload
  updateShoppingList(input: UpdateShoppingListInput!): UpdateShoppingListPayload
}

type MyProduct implements Node {
  id: ID!
  name: String
  description: String
  imageUrl: String
  barcode: String
  size: String
  productPageUrl: String
  tags: [Tag]
}

# A connection to a list of items.
type MyProductConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [MyProductEdge]
}

# An edge in a connection.
type MyProductEdge {
  # The item at the end of the edge
  node: MyProduct

  # A cursor for use in pagination
  cursor: String!
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

type OpeningHours {
  from: String
  until: String
}

type OwnedStore implements Node {
  id: ID!
  key: String
  name: String
  imageUrl: String
  address: String
  geoLocation: GeoLocation
  openingHours: OpeningHours
  phones: [Phone!]
  parentStore: ParentOwnedStore
}

# A connection to a list of items.
type OwnedStoreTypeConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [OwnedStoreTypeEdge]
}

# An edge in a connection.
type OwnedStoreTypeEdge {
  # The item at the end of the edge
  node: OwnedStore

  # A cursor for use in pagination
  cursor: String!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type ParentOwnedStore implements Node {
  id: ID!
  key: String
  name: String
  imageUrl: String
  address: String
  geoLocation: GeoLocation
  openingHours: OpeningHours
  phones: [Phone!]
}

type ParentStore implements Node {
  id: ID!
  key: String
  name: String
  imageUrl: String
  address: String
  geoLocation: GeoLocation
  openingHours: OpeningHours
  phones: [Phone!]
}

type ParentTag implements Node {
  id: ID!
  key: String
  name: String
  description: String
  imageUrl: String
  level: Int
  forDisplay: Boolean
}

type Phone {
  label: String
  number: String
}

type Product implements Node {
  id: ID!
  name: String
  description: String
  imageUrl: String
  barcode: String
  size: String
  productPageUrl: String
  specialType: String
  priceToDisplay: Float
  saving: Float
  savingPercentage: Float
  currentPrice: Float
  wasPrice: Float
  multiBuy: MultiBuy
  unitPrice: UnitPrice
  offerEndDate: String
  comments: String
  store: Store
  tags: [Tag]
}

# A connection to a list of items.
type ProductConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [ProductEdge]
}

# An edge in a connection.
type ProductEdge {
  # The item at the end of the edge
  node: Product

  # A cursor for use in pagination
  cursor: String!
}

type Query {
  user: User
  viewer: Viewer

  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
}

input RemoveItemsFromShoppingListInput {
  shoppingListId: ID!
  shoppingListItemIds: [ID!]
  clientMutationId: String
}

type RemoveItemsFromShoppingListPayload {
  errorMessage: String
  clientMutationId: String
}

input RemoveShoppingListInput {
  shoppingListId: ID!
  clientMutationId: String
}

type RemoveShoppingListPayload {
  errorMessage: String
  clientMutationId: String
}

input SetUserDefaultShoppingListInput {
  shoppingListId: ID!
  clientMutationId: String
}

type SetUserDefaultShoppingListPayload {
  errorMessage: String
  shoppingListItems: [ShoppingListItemEdge]
  clientMutationId: String
}

type ShoppingList implements Node {
  id: ID!
  name: String
  totalItemsCount: Int
  shoppingListItems(after: String, first: Int, before: String, last: Int, name: String, addedByUserId: ID, tagKeys: [String], storeKeys: [String]): ShoppingListItemConnection
}

# A connection to a list of items.
type ShoppingListConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [ShoppingListEdge]
}

# An edge in a connection.
type ShoppingListEdge {
  # The item at the end of the edge
  node: ShoppingList

  # A cursor for use in pagination
  cursor: String!
}

type ShoppingListItem implements Node {
  id: ID!
  itemType: String
  stapleItemId: ID
  productPriceId: ID
  name: String
  description: String
  imageUrl: String
  barcode: String
  size: String
  productPageUrl: String
  specialType: String
  priceToDisplay: Float
  saving: Float
  savingPercentage: Float
  currentPrice: Float
  wasPrice: Float
  multiBuy: MultiBuy
  unitPrice: UnitPrice
  offerEndDate: String
  quantity: Int
  comments: String
  store: Store
  tags: [Tag]
}

# A connection to a list of items.
type ShoppingListItemConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [ShoppingListItemEdge]
}

# An edge in a connection.
type ShoppingListItemEdge {
  # The item at the end of the edge
  node: ShoppingListItem

  # A cursor for use in pagination
  cursor: String!
}

type StapleItem implements Node {
  id: ID!
  name: String
  description: String
  imageUrl: String
  popular: Boolean
  tags: [Tag]
}

# A connection to a list of items.
type StapleItemConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [StapleItemEdge]
}

# An edge in a connection.
type StapleItemEdge {
  # The item at the end of the edge
  node: StapleItem

  # A cursor for use in pagination
  cursor: String!
}

type Store implements Node {
  id: ID!
  key: String
  name: String
  imageUrl: String
  address: String
  geoLocation: GeoLocation
  openingHours: OpeningHours
  phones: [Phone!]
  parentStore: ParentStore
}

# A connection to a list of items.
type StoreTypeConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [StoreTypeEdge]
}

# An edge in a connection.
type StoreTypeEdge {
  # The item at the end of the edge
  node: Store

  # A cursor for use in pagination
  cursor: String!
}

input SubmitUserFeedbackInput {
  feedback: String!
  clientMutationId: String
}

type SubmitUserFeedbackPayload {
  errorMessage: String
  clientMutationId: String
}

type Tag implements Node {
  id: ID!
  key: String
  name: String
  description: String
  imageUrl: String
  level: Int
  forDisplay: Boolean
  parentTag: ParentTag
}

# A connection to a list of items.
type TagTypeConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [TagTypeEdge]
}

# An edge in a connection.
type TagTypeEdge {
  # The item at the end of the edge
  node: Tag

  # A cursor for use in pagination
  cursor: String!
}

type UnitPrice {
  price: Float
  size: String
}

input UpdateShoppingListInput {
  shoppingListId: ID!
  name: String
  clientMutationId: String
}

type UpdateShoppingListPayload {
  errorMessage: String
  shoppingList: ShoppingListEdge
  clientMutationId: String
}

type User implements Node {
  id: ID!
  shoppingLists(after: String, first: Int, before: String, last: Int, name: String, shoppingListIds: [ID!]): ShoppingListConnection
  defaultShoppingList: ShoppingList
  shoppingList(shoppingListId: ID!): ShoppingList
  defaultShoppingListItems(after: String, first: Int, before: String, last: Int, name: String, addedByUserId: ID, tagKeys: [String], storeKeys: [String]): ShoppingListItemConnection
  shoppingListItems(after: String, first: Int, before: String, last: Int, shoppingListId: ID!, name: String, addedByUserId: ID, tagKeys: [String], storeKeys: [String]): ShoppingListItemConnection
  stapleItems(after: String, first: Int, before: String, last: Int, name: String, tagKeys: [String]): StapleItemConnection
  products(after: String, first: Int, before: String, last: Int, name: String, description: String, sortOption: String, tagKeys: [String], storeKeys: [String], special: Boolean): ProductConnection
  product(productId: ID!): Product
  myProducts(after: String, first: Int, before: String, last: Int, name: String, description: String, sortOption: String, tagKeys: [String]): MyProductConnection
  myProduct(myProductId: ID!): MyProduct
  ownedStores(after: String, first: Int, before: String, last: Int, name: String, forDisplay: Boolean): OwnedStoreTypeConnection
}

type Viewer implements Node {
  id: ID!
  tags(after: String, first: Int, before: String, last: Int, name: String, level: Int, forDisplay: Boolean): TagTypeConnection
  store(storeId: ID!): Store
  stores(after: String, first: Int, before: String, last: Int, name: String, forDisplay: Boolean): StoreTypeConnection
  masterProducts(after: String, first: Int, before: String, last: Int, name: String, description: String, sortOption: String, tagKeys: [String]): MasterProductConnection
  masterProduct(masterProductId: ID!): MasterProduct
}
